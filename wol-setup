#!/bin/bash
# WoL Game Server Proxy - Interactive Setup Script

set -e

CONFIG_DIR="/etc/wol-proxy"
CONFIG_FILE="$CONFIG_DIR/config.json"
INSTALL_DIR="/opt/wol-proxy"
SERVICE_USER="wol-proxy"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_question() { echo -e "${BLUE}[SETUP]${NC} $1"; }

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 0
    fi
    return 1
}

validate_mac() {
    local mac=$1
    if [[ $mac =~ ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$ ]]; then
        return 0
    fi
    return 1
}

get_default_interface() {
    # Get default network interface from default route
    ip route | grep '^default' | head -n1 | sed 's/.*dev \([^ ]*\).*/\1/'
}

list_interfaces() {
    echo "Available network interfaces:"
    local i=1
    while IFS= read -r interface; do
        local ip_info=$(ip addr show "$interface" | grep 'inet ' | awk '{print $2}' | head -n1)
        echo "  $i) $interface ${ip_info:+($ip_info)}"
        ((i++))
    done < <(ip link show | grep '^[0-9]' | cut -d: -f2 | sed 's/^ //' | grep -v '^lo$')
}

select_interface() {
    local interfaces=()
    while IFS= read -r interface; do
        interfaces+=("$interface")
    done < <(ip link show | grep '^[0-9]' | cut -d: -f2 | sed 's/^ //' | grep -v '^lo$')
    
    if [[ ${#interfaces[@]} -eq 0 ]]; then
        echo "eth0"  # fallback
        return
    fi
    
    if [[ ${#interfaces[@]} -eq 1 ]]; then
        echo "${interfaces[0]}"
        return
    fi
    
    echo
    list_interfaces
    echo
    
    while true; do
        read -p "Select interface (1-${#interfaces[@]}) or enter name manually: " selection
        
        if [[ "$selection" =~ ^[0-9]+$ ]] && [[ $selection -ge 1 ]] && [[ $selection -le ${#interfaces[@]} ]]; then
            echo "${interfaces[$((selection-1))]}"
            return
        elif [[ -n "$selection" ]]; then
            # Check if manually entered interface exists
            if ip link show "$selection" &>/dev/null; then
                echo "$selection"
                return
            else
                log_error "Interface '$selection' not found!"
            fi
        else
            log_error "Please make a selection!"
        fi
    done
}


get_config() {
    clear
    echo -e "${BLUE}ðŸŽ® WoL Game Server Proxy - Setup${NC}"
    echo "================================="
    echo
    
    # Required settings
    while true; do
        read -p "Server IP address: " SERVER_IP
        if [[ -n "$SERVER_IP" ]] && validate_ip "$SERVER_IP"; then
            break
        fi
        log_error "Please enter a valid IP address!"
    done
    
    while true; do
        read -p "Server MAC address: " MAC_ADDRESS
        if [[ -n "$MAC_ADDRESS" ]] && validate_mac "$MAC_ADDRESS"; then
            break
        fi
        log_error "Please enter a valid MAC address (e.g., AA:BB:CC:DD:EE:FF)!"
    done
    
    # Network interface selection
    echo
    log_question "Network interface selection:"
    local default_interface
    default_interface=$(get_default_interface)
    echo "Detected default interface: ${default_interface:-eth0}"
    
    echo "Options:"
    echo "  1) Use default interface (${default_interface:-eth0})"
    echo "  2) Select from available interfaces"
    echo "  3) Enter manually"
    
    while true; do
        read -p "Choice [1]: " interface_choice
        interface_choice=${interface_choice:-1}
        
        case $interface_choice in
            1)
                NETWORK_INTERFACE=${default_interface:-eth0}
                break
                ;;
            2)
                NETWORK_INTERFACE=$(select_interface)
                break
                ;;
            3)
                read -p "Enter interface name: " NETWORK_INTERFACE
                if [[ -n "$NETWORK_INTERFACE" ]]; then
                    if ! ip link show "$NETWORK_INTERFACE" &>/dev/null; then
                        log_error "Warning: Interface '$NETWORK_INTERFACE' not found, but will continue."
                    fi
                    break
                else
                    log_error "Please enter an interface name!"
                fi
                ;;
            *)
                log_error "Please choose 1, 2, or 3!"
                ;;
        esac
    done
    
    echo "Selected interface: $NETWORK_INTERFACE"
    
    read -p "Server boot wait time [90]: " BOOT_WAIT
    BOOT_WAIT=${BOOT_WAIT:-90}
    
    read -p "Enable Minecraft? [y/N]: " MINECRAFT_ENABLED
    case $MINECRAFT_ENABLED in [Yy]*) MINECRAFT_ENABLED=true ;; *) MINECRAFT_ENABLED=false ;; esac
    
    read -p "Enable Satisfactory? [y/N]: " SATISFACTORY_ENABLED
    case $SATISFACTORY_ENABLED in [Yy]*) SATISFACTORY_ENABLED=true ;; *) SATISFACTORY_ENABLED=false ;; esac
}

create_config() {
    log_info "Creating configuration..."
    
    cat > "$CONFIG_FILE" << EOF
{
  "server": {
    "target_ip": "$SERVER_IP",
    "mac_address": "$MAC_ADDRESS",
    "network_interface": "$NETWORK_INTERFACE"
  },
  "timing": {
    "boot_wait_seconds": $BOOT_WAIT,
    "health_check_interval": 15,
    "wol_retry_interval": 5,
    "server_check_timeout": 3,
    "connection_timeout": 5
  },
  "minecraft": {
    "enabled": $MINECRAFT_ENABLED,
    "port": 25565,
    "protocol_version": 763,
    "max_players_display": 20,
    "motd_offline": "Â§6WoL Proxy Â§8- Â§aJoin to start server!",
    "motd_starting": "Â§6Server Starting Â§8- Â§ePlease wait...",
    "version_text_starting": "Starting...",
    "kick_message": "Server is starting, please wait and try again in a moment!"
  },
  "satisfactory": {
    "enabled": $SATISFACTORY_ENABLED,
    "game_port": 7777,
    "query_port": 15000,
    "beacon_port": 15777
  },
  "logging": {
    "level": "INFO",
    "file": "/var/log/wol-proxy.log",
    "max_size_mb": 10,
    "backup_count": 3,
    "console_output": false
  },
  "monitoring": {
    "health_check_enabled": true,
    "status_endpoint_port": 8080
  }
}
EOF
    
    chown root:root "$CONFIG_FILE"
    chmod 644 "$CONFIG_FILE"
    
    log_info "Configuration created with optimized settings"
    echo "  - Improved server detection timeouts"
    echo "  - Better Minecraft MOTD messages" 
    echo "  - Enhanced logging configuration"
}

start_service() {
    log_info "Starting service..."
    systemctl restart wol-proxy.service
    sleep 2
    
    if systemctl is-active --quiet wol-proxy.service; then
        log_info "âœ… Service started successfully!"
        echo
        echo "ðŸŽ‰ Setup Complete!"
        echo "Your WoL proxy is now running on your Tinker Board."
        echo
        echo "Test: curl http://localhost:8080/status"
    else
        log_error "Service failed to start. Check: journalctl -u wol-proxy.service"
    fi
}

main() {
    check_root
    get_config
    create_config
    start_service
}

main "$@"