#!/bin/bash
# WoL Game Server Proxy - Interactive Setup Script

set -e

CONFIG_DIR="/etc/wol-proxy"
CONFIG_FILE="$CONFIG_DIR/config.json"
INSTALL_DIR="/opt/wol-proxy"
SERVICE_USER="wol-proxy"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_question() { echo -e "${BLUE}[SETUP]${NC} $1"; }

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 0
    fi
    return 1
}

validate_mac() {
    local mac=$1
    if [[ $mac =~ ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$ ]]; then
        return 0
    fi
    return 1
}

get_config() {
    clear
    echo -e "${BLUE}ðŸŽ® WoL Game Server Proxy - Setup${NC}"
    echo "================================="
    echo
    
    # Required settings
    while true; do
        read -p "Server IP address: " SERVER_IP
        if [[ -n "$SERVER_IP" ]] && validate_ip "$SERVER_IP"; then
            break
        fi
        log_error "Please enter a valid IP address!"
    done
    
    while true; do
        read -p "Server MAC address: " MAC_ADDRESS
        if [[ -n "$MAC_ADDRESS" ]] && validate_mac "$MAC_ADDRESS"; then
            break
        fi
        log_error "Please enter a valid MAC address (e.g., AA:BB:CC:DD:EE:FF)!"
    done
    
    # Optional settings
    read -p "Network interface [eth0]: " NETWORK_INTERFACE
    NETWORK_INTERFACE=${NETWORK_INTERFACE:-eth0}
    
    read -p "Server boot wait time [90]: " BOOT_WAIT
    BOOT_WAIT=${BOOT_WAIT:-90}
    
    read -p "Enable Minecraft? [y/N]: " MINECRAFT_ENABLED
    case $MINECRAFT_ENABLED in [Yy]*) MINECRAFT_ENABLED=true ;; *) MINECRAFT_ENABLED=false ;; esac
    
    read -p "Enable Satisfactory? [y/N]: " SATISFACTORY_ENABLED
    case $SATISFACTORY_ENABLED in [Yy]*) SATISFACTORY_ENABLED=true ;; *) SATISFACTORY_ENABLED=false ;; esac
}

create_config() {
    log_info "Creating configuration..."
    
    cat > "$CONFIG_FILE" << EOF
{
  "server": {
    "target_ip": "$SERVER_IP",
    "mac_address": "$MAC_ADDRESS",
    "network_interface": "$NETWORK_INTERFACE"
  },
  "timing": {
    "boot_wait_seconds": $BOOT_WAIT,
    "health_check_interval": 15,
    "wol_retry_interval": 5
  },
  "minecraft": {
    "enabled": $MINECRAFT_ENABLED,
    "port": 25565,
    "motd_offline": "Â§aJoin to start server"
  },
  "satisfactory": {
    "enabled": $SATISFACTORY_ENABLED,
    "game_port": 7777,
    "query_port": 15000,
    "beacon_port": 15777
  },
  "logging": {
    "level": "INFO",
    "file": "/var/log/wol-proxy.log"
  },
  "monitoring": {
    "status_endpoint_port": 8080
  }
}
EOF
    
    chown root:root "$CONFIG_FILE"
    chmod 644 "$CONFIG_FILE"
}

start_service() {
    log_info "Starting service..."
    systemctl restart wol-proxy.service
    sleep 2
    
    if systemctl is-active --quiet wol-proxy.service; then
        log_info "âœ… Service started successfully!"
        echo
        echo "ðŸŽ‰ Setup Complete!"
        echo "Your WoL proxy is now running on your Tinker Board."
        echo
        echo "Test: curl http://localhost:8080/status"
    else
        log_error "Service failed to start. Check: journalctl -u wol-proxy.service"
    fi
}

main() {
    check_root
    get_config
    create_config
    start_service
}

main "$@"